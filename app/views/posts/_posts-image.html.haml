.mainber
  .mainber__header
    .mainber__header__head
      %span.mainber__head__image
        = link_to exhibition_path(id: post.user.id) do
          - if post.user.image?
            = image_tag post.user.image.url, size: "42", class: "tops-icon"
          - else
            = image_tag src="user1.png", size: "42", class: "tops-icon"
      .mainber__header__head__name-place
        .mainber__header__head__name-place__name
          = link_to exhibition_path(id: post.user.id) do
            = post.user.username
        .mainber__header__head__name-place__place
          = link_to exhibition_path(id: post.user.id) do
            = post.user.nickname
      .mainber__header__head__fab
        %button.option-btn-post{ id: "option-btn-post-#{ post.id }" }
          = icon('fas fa-ellipsis-h',  class: "show-header-icon")
        .gray-back
          -if user_signed_in? && current_user.id == post.user_id
            .option-menu
              %ul
                %li.option-listc-delete
                  =link_to '削除', "/posts/#{post.id}", method: :delete
                %li.option-post
                  =link_to  =link_to '投稿へ移動', "/posts/#{post.id}"
                %li.option-list-edit
                  %div{"data-turbolinks" => "false"}
                    =link_to '編集', "/posts/#{post.id}/edit"
                %li.option-list-bottom
                  %button.cancel-btn キャンセル
          -else
            .option-menu
              %ul
                %li.option-list-follow-cancel
                  - unless current_user.following?(post.user)
                    = form_for current_user.follows.build, url: { controller: "follows", action: "top_create" } do |f|
                      = f.hidden_field :following_id, value: post.user.id
                      = f.submit 'フォローする', class: 'follow-btn-post'
                  - if current_user.following?(post.user)
                    = form_for current_user.follows.find_by(following_id: post.user.id), html: { method: :delete }, url: { controller: "follows", action: "top_destroy", id: post.user.id } do |f|
                      =f.hidden_field :following_id, value: post.user.id
                      =f.submit 'フォローをやめる', class: 'follow-btn-post-destroy'
                %li.option-post
                  =link_to '投稿へ移動', "/posts/#{post.id}"
                %li.option-list-bottom
                  %button.cancel-btn キャンセル
  %span.mainber__images
    =link_to post_path(post) do
      - if post.images.first.image.file.content_type.include?('image/')
        = image_tag post.images.first.image.url, class: "main-new-arrival__product--image--first slick", size: "614"
      - else
        = video_tag post.images.first.image.url, class: "main-new-arrival__product--image--first slick", size: "614", controls: true, loop: true
  %section.mainber__icon
    %span.mainber__icon__heart
      = render partial: 'likes/like', locals: { post: post }
    %span.mainber__icon__comment
      = icon('far fa-comment',  class: "mainber__icon__heart__btn--icon")
    %span.mainber__icon__share
      = icon('far fa-share-square',  class: "mainber__icon__heart__btn--icon")


  %section.mainber__fab{ id: "mainber__fab-#{ post.id }" }
    = post.likes.length
    %span 人が「いいね！」しました
  .mainber__username
    = link_to exhibition_path(id: post.user.id) do
      = post.user.username
  .mainber__content
    = post.content
  .mainber__time
    %time(datetime="#{post.created_at}")= time_ago_in_words(post.created_at)
  .comments-index{ id: "comments-create-#{ post.id }" }
    - if post.comments
      - post.comments.each do |comment|
        .comments-post__box
          .comments-post__box__add
            .comments-post__box__add__box
              .comments-post__box__add__box__name
                = link_to exhibition_path(id: comment.user.id) do
                  = comment.user.username
              .comments-post__box__add__box__content
                = comment.content
              .comments-post__box__time
                %time(datetime="#{comment.created_at}")= time_ago_in_words(comment.created_at)
          .comment-post__box__add__delete
            - if user_signed_in? && current_user.id == comment.user_id
              =link_to "削除", post_comment_path(post_id: post.id, id: comment.id), method: :delete, class: "comments-delete"
 
  .mainber__comment
    = form_with model: [post, @comment], local: true, class: "new-comment" do |f|
      .mainber__comment__box
        = f.text_area :content, class: "comment-text", id: "comment-text", placeholder: 'コメントを追加...'
        = f.submit "投稿する", class: "comment-submit", id: "comment-submit"